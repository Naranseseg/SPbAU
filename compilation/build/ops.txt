def GCD(a, b):
    a, b, r0, multiplier, r1, r2, num_1, num_2, r3, r4 :: object
    r5 :: int32
    r6 :: bit
    r7 :: bool
    r8, r9 :: object
    r10 :: int32
    r11 :: bit
    r12 :: bool
    r13 :: object
    r14 :: int32
    r15 :: bit
    r16 :: bool
    r17, r18, r19 :: object
    r20 :: int32
    r21 :: bit
    r22 :: bool
    r23, r24, r25, r26 :: object
    r27 :: int32
    r28 :: bit
    r29 :: bool
    r30, r31, r32, num_3, num_4, r33 :: object
    r34 :: int32
    r35 :: bit
    r36 :: bool
    r37, quotient, r38 :: object
    r39 :: int32
    r40 :: bit
    r41 :: bool
    r42, r43, r44, r45, r46 :: object
    r47 :: int32
    r48 :: bit
    r49 :: bool
    r50, r51, r52, r53, r54, r55, r56, r57, r58 :: object
    r59 :: int32
    r60 :: bit
    r61 :: bool
    r62, r63, r64, r65, r66, r67, r68, r69 :: object
    r70 :: int32
    r71 :: bit
    r72 :: bool
    r73, r74, r75 :: object
    r76 :: object[1]
    r77 :: object_ptr
    r78, r79, r80, coefficient_1, coefficient_2, r81 :: object
    r82 :: int32
    r83 :: bit
    r84 :: bool
    r85 :: object
    r86 :: tuple[object, object, object]
    r87, r88 :: object
L0:
    r0 = box(short_int, 2)
    multiplier = r0
    inc_ref a
    r1 = a
    inc_ref b
    r2 = b
    num_1 = r1
    num_2 = r2
L1:
    r3 = box(short_int, 0)
    r4 = PyObject_RichCompare(num_1, r3, 3)
    dec_ref r3
    if is_error(r4) goto L68 (error at GCD:4) else goto L2
L2:
    r5 = PyObject_IsTrue(r4)
    dec_ref r4
    r6 = r5 >= 0 :: signed
    if not r6 goto L68 (error at GCD:4) else goto L3 :: bool
L3:
    r7 = truncate r5: int32 to builtins.bool
    if r7 goto L4 else goto L14 :: bool
L4:
    r8 = box(short_int, 0)
    r9 = PyObject_RichCompare(num_2, r8, 3)
    dec_ref r8
    if is_error(r9) goto L68 (error at GCD:4) else goto L5
L5:
    r10 = PyObject_IsTrue(r9)
    dec_ref r9
    r11 = r10 >= 0 :: signed
    if not r11 goto L68 (error at GCD:4) else goto L6 :: bool
L6:
    r12 = truncate r10: int32 to builtins.bool
    if r12 goto L7 else goto L14 :: bool
L7:
    r13 = PyObject_RichCompare(num_1, num_2, 4)
    if is_error(r13) goto L68 (error at GCD:5) else goto L8
L8:
    r14 = PyObject_IsTrue(r13)
    dec_ref r13
    r15 = r14 >= 0 :: signed
    if not r15 goto L68 (error at GCD:5) else goto L9 :: bool
L9:
    r16 = truncate r14: int32 to builtins.bool
    if r16 goto L10 else goto L12 :: bool
L10:
    r17 = PyNumber_Remainder(num_1, num_2)
    dec_ref num_1
    if is_error(r17) goto L69 (error at GCD:6) else goto L11
L11:
    num_1 = r17
    goto L1
L12:
    r18 = PyNumber_Remainder(num_2, num_1)
    dec_ref num_2
    if is_error(r18) goto L70 (error at GCD:8) else goto L13
L13:
    num_2 = r18
    goto L1
L14:
    r19 = PyObject_RichCompare(num_2, num_1, 4)
    if is_error(r19) goto L68 (error at GCD:9) else goto L15
L15:
    r20 = PyObject_IsTrue(r19)
    dec_ref r19
    r21 = r20 >= 0 :: signed
    if not r21 goto L68 (error at GCD:9) else goto L16 :: bool
L16:
    r22 = truncate r20: int32 to builtins.bool
    if r22 goto L17 else goto L18 :: bool
L17:
    inc_ref num_2
    r23 = num_2
    goto L19
L18:
    inc_ref num_1
    r23 = num_1
L19:
    r24 = PyNumber_TrueDivide(a, r23)
    dec_ref r23
    if is_error(r24) goto L68 (error at GCD:9) else goto L20
L20:
    r25 = r24
    r26 = PyObject_RichCompare(num_2, num_1, 4)
    if is_error(r26) goto L71 (error at GCD:9) else goto L21
L21:
    r27 = PyObject_IsTrue(r26)
    dec_ref r26
    r28 = r27 >= 0 :: signed
    if not r28 goto L71 (error at GCD:9) else goto L22 :: bool
L22:
    r29 = truncate r27: int32 to builtins.bool
    if r29 goto L23 else goto L24 :: bool
L23:
    inc_ref num_2
    r30 = num_2
    goto L25
L24:
    inc_ref num_1
    r30 = num_1
L25:
    r31 = PyNumber_TrueDivide(b, r30)
    dec_ref r30
    if is_error(r31) goto L71 (error at GCD:9) else goto L26
L26:
    r32 = r31
    num_3 = r25
    num_4 = r32
    r33 = PyObject_RichCompare(num_4, num_3, 4)
    if is_error(r33) goto L72 (error at GCD:10) else goto L27
L27:
    r34 = PyObject_IsTrue(r33)
    dec_ref r33
    r35 = r34 >= 0 :: signed
    if not r35 goto L72 (error at GCD:10) else goto L28 :: bool
L28:
    r36 = truncate r34: int32 to builtins.bool
    if r36 goto L29 else goto L30 :: bool
L29:
    inc_ref num_4
    r37 = num_4
    goto L31
L30:
    inc_ref num_3
    r37 = num_3
L31:
    quotient = r37
    r38 = PyObject_RichCompare(num_3, num_4, 4)
    if is_error(r38) goto L73 (error at GCD:11) else goto L32
L32:
    r39 = PyObject_IsTrue(r38)
    dec_ref r38
    r40 = r39 >= 0 :: signed
    if not r40 goto L73 (error at GCD:11) else goto L33 :: bool
L33:
    r41 = truncate r39: int32 to builtins.bool
    if r41 goto L34 else goto L43 :: bool
L34:
    r42 = box(short_int, 2)
    r43 = PyNumber_Subtract(num_3, r42)
    dec_ref r42
    if is_error(r43) goto L73 (error at GCD:12) else goto L35
L35:
    r44 = PyNumber_Remainder(r43, num_4)
    dec_ref r43
    if is_error(r44) goto L73 (error at GCD:12) else goto L36
L36:
    r45 = box(short_int, 0)
    r46 = PyObject_RichCompare(r44, r45, 3)
    dec_ref r44
    dec_ref r45
    if is_error(r46) goto L73 (error at GCD:12) else goto L37
L37:
    r47 = PyObject_IsTrue(r46)
    dec_ref r46
    r48 = r47 >= 0 :: signed
    if not r48 goto L73 (error at GCD:12) else goto L38 :: bool
L38:
    r49 = truncate r47: int32 to builtins.bool
    if r49 goto L39 else goto L51 :: bool
L39:
    r50 = PyNumber_Add(num_3, quotient)
    if is_error(r50) goto L73 (error at GCD:13) else goto L40
L40:
    r51 = PyNumber_InPlaceAdd(num_3, r50)
    dec_ref num_3
    dec_ref r50
    if is_error(r51) goto L74 (error at GCD:13) else goto L41
L41:
    num_3 = r51
    r52 = box(short_int, 2)
    r53 = PyNumber_InPlaceAdd(multiplier, r52)
    dec_ref multiplier
    dec_ref r52
    if is_error(r53) goto L75 (error at GCD:14) else goto L42
L42:
    multiplier = r53
    goto L34
L43:
    r54 = box(short_int, 2)
    r55 = PyNumber_Subtract(num_4, r54)
    dec_ref r54
    if is_error(r55) goto L73 (error at GCD:16) else goto L44
L44:
    r56 = PyNumber_Remainder(r55, num_3)
    dec_ref r55
    if is_error(r56) goto L73 (error at GCD:16) else goto L45
L45:
    r57 = box(short_int, 0)
    r58 = PyObject_RichCompare(r56, r57, 3)
    dec_ref r56
    dec_ref r57
    if is_error(r58) goto L73 (error at GCD:16) else goto L46
L46:
    r59 = PyObject_IsTrue(r58)
    dec_ref r58
    r60 = r59 >= 0 :: signed
    if not r60 goto L73 (error at GCD:16) else goto L47 :: bool
L47:
    r61 = truncate r59: int32 to builtins.bool
    if r61 goto L48 else goto L51 :: bool
L48:
    r62 = PyNumber_InPlaceAdd(num_4, quotient)
    dec_ref num_4
    if is_error(r62) goto L76 (error at GCD:17) else goto L49
L49:
    num_4 = r62
    r63 = box(short_int, 2)
    r64 = PyNumber_InPlaceAdd(multiplier, r63)
    dec_ref multiplier
    dec_ref r63
    if is_error(r64) goto L75 (error at GCD:18) else goto L50
L50:
    multiplier = r64
    goto L43
L51:
    inc_ref multiplier
    r65 = multiplier
    r66 = PyNumber_Multiply(multiplier, quotient)
    dec_ref multiplier
    dec_ref quotient
    if is_error(r66) goto L77 (error at GCD:19) else goto L52
L52:
    r67 = box(short_int, 2)
    r68 = PyNumber_Subtract(r66, r67)
    dec_ref r66
    dec_ref r67
    if is_error(r68) goto L77 (error at GCD:19) else goto L53
L53:
    r69 = PyObject_RichCompare(num_4, num_3, 0)
    if is_error(r69) goto L78 (error at GCD:19) else goto L54
L54:
    r70 = PyObject_IsTrue(r69)
    dec_ref r69
    r71 = r70 >= 0 :: signed
    if not r71 goto L78 (error at GCD:19) else goto L55 :: bool
L55:
    r72 = truncate r70: int32 to builtins.bool
    if r72 goto L79 else goto L80 :: bool
L56:
    r73 = num_4
    goto L58
L57:
    r73 = num_3
L58:
    r74 = PyNumber_TrueDivide(r68, r73)
    dec_ref r68
    dec_ref r73
    if is_error(r74) goto L81 (error at GCD:19) else goto L59
L59:
    r75 = load_address PyLong_Type
    r76 = [r74]
    r77 = load_address r76
    r78 = _PyObject_Vectorcall(r75, r77, 1, 0)
    if is_error(r78) goto L82 (error at GCD:19) else goto L60
L60:
    dec_ref r74
    r79 = PyNumber_Negative(r78)
    dec_ref r78
    if is_error(r79) goto L81 (error at GCD:19) else goto L61
L61:
    r80 = r79
    coefficient_1 = r65
    coefficient_2 = r80
    r81 = PyObject_RichCompare(num_2, num_1, 4)
    if is_error(r81) goto L83 (error at GCD:20) else goto L62
L62:
    r82 = PyObject_IsTrue(r81)
    dec_ref r81
    r83 = r82 >= 0 :: signed
    if not r83 goto L83 (error at GCD:20) else goto L63 :: bool
L63:
    r84 = truncate r82: int32 to builtins.bool
    if r84 goto L84 else goto L85 :: bool
L64:
    r85 = num_2
    goto L66
L65:
    r85 = num_1
L66:
    r86 = (coefficient_1, coefficient_2, r85)
    dec_ref coefficient_1
    dec_ref coefficient_2
    dec_ref r85
    r87 = box(tuple[object, object, object], r86)
    return r87
L67:
    r88 = <error> :: object
    return r88
L68:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    goto L67
L69:
    dec_ref multiplier
    dec_ref num_2
    goto L67
L70:
    dec_ref multiplier
    dec_ref num_1
    goto L67
L71:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    dec_ref r25
    goto L67
L72:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref num_4
    goto L67
L73:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref num_4
    dec_ref quotient
    goto L67
L74:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    dec_ref num_4
    dec_ref quotient
    goto L67
L75:
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref num_4
    dec_ref quotient
    goto L67
L76:
    dec_ref multiplier
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref quotient
    goto L67
L77:
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref num_4
    dec_ref r65
    goto L67
L78:
    dec_ref num_1
    dec_ref num_2
    dec_ref num_3
    dec_ref num_4
    dec_ref r65
    dec_ref r68
    goto L67
L79:
    dec_ref num_3
    goto L56
L80:
    dec_ref num_4
    goto L57
L81:
    dec_ref num_1
    dec_ref num_2
    dec_ref r65
    goto L67
L82:
    dec_ref num_1
    dec_ref num_2
    dec_ref r65
    dec_ref r74
    goto L67
L83:
    dec_ref num_1
    dec_ref num_2
    dec_ref coefficient_1
    dec_ref coefficient_2
    goto L67
L84:
    dec_ref num_1
    goto L64
L85:
    dec_ref num_2
    goto L65

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5, r6, r7, r8 :: object
    r9 :: str
    r10 :: object
    r11 :: object[1]
    r12 :: object_ptr
    r13 :: object
    r14 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L7 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = box(short_int, 98)
    r6 = box(short_int, 84)
    r7 = GCD(r5, r6)
    dec_ref r5
    dec_ref r6
    if is_error(r7) goto L7 (error at <module>:21) else goto L4
L4:
    r8 = builtins :: module
    r9 = 'print'
    r10 = CPyObject_GetAttr(r8, r9)
    if is_error(r10) goto L8 (error at <module>:21) else goto L5
L5:
    r11 = [r7]
    r12 = load_address r11
    r13 = _PyObject_Vectorcall(r10, r12, 1, 0)
    dec_ref r10
    if is_error(r13) goto L8 (error at <module>:21) else goto L9
L6:
    dec_ref r7
    return 1
L7:
    r14 = <error> :: None
    return r14
L8:
    dec_ref r7
    goto L7
L9:
    dec_ref r13
    goto L6
